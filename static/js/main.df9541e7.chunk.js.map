{"version":3,"sources":["component/Train/Train.js","component/Station/Collapse/Collapse.js","component/Station/Station.js","component/TrainStation.js","App.js","serviceWorker.js","index.js"],"names":["Train","props","data","useEffect","Object","keys","length","insertAnimation","changeText","btn","i","dest","textContent","removeClass","classList","remove","train","document","getElementById","status","add","onClickTrain","e","a","trainCurrent","parseInt","target","id","axios","get","ENDPOINT","catch","err","console","log","className","onClick","x","JSON","stringify","Station","changeColor","station","divStation","child","onClickStation","preventDefault","name","TrainStation","useState","sendData","setSendData","getData","setGetData","then","response","setInterval","fetchData","innerHTML","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.df9541e7.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport BoxAnimation from './BoxAnimation';\r\nimport './Train.scss';\r\n\r\nvar ENDPOINT = 'https://train-station.herokuapp.com';\r\n\r\nconst Train = (props) => {\r\n    var data = props.data;\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(data).length > 0) insertAnimation();\r\n    });\r\n\r\n    const changeText = (btn,i,dest) => {\r\n        if(dest === 0) btn.textContent = `< Train${i}`;\r\n        if(dest === 1) btn.textContent = `Train${i} >`;\r\n    }\r\n\r\n    const removeClass = (btn) => {\r\n        btn.classList.remove('forwardAnimation');\r\n        btn.classList.remove('backwardAnimation');\r\n        btn.classList.remove('forward');\r\n        btn.classList.remove('backward');\r\n    }\r\n\r\n    const insertAnimation = () => {\r\n        let train = data.train;\r\n        for(let i = 0; i < 2; i++){\r\n            let btn = document.getElementById(i);\r\n\r\n            removeClass(btn);\r\n            changeText(btn,i,train[i].dest);\r\n\r\n            if(train[i].status === 'error' || train[i].status === 'going'){\r\n                if(train[i].dest === 1){\r\n                    btn.classList.add('forward');\r\n                    btn.classList.add('forwardAnimation');\r\n                }else{\r\n                    btn.classList.add('backward');\r\n                    btn.classList.add('backwardAnimation');\r\n                }\r\n            }else if(train[i].status === 'stay'){\r\n                if(train[i].dest === 1){\r\n                    btn.classList.add('backward');\r\n                }else{\r\n                    btn.classList.add('forward');\r\n                }\r\n            }else if(train[i].status === 'waiting'){\r\n                if(train[i].dest === 1){\r\n                    btn.classList.add('forward')\r\n                }else{\r\n                    btn.classList.add('backward')\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const onClickTrain = async (e) => {\r\n        let trainCurrent = parseInt(e.target.id);        \r\n        await axios.get(ENDPOINT+'/station/arrived/'+trainCurrent)\r\n        .catch(err => console.log(err)); \r\n    }\r\n    \r\n    return(\r\n        <div className='Train'>\r\n            <div>\r\n                <div className='coverButton'>\r\n                    <button id='0' onClick={onClickTrain} className='forward'>Train0 &gt;</button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className='coverButton'>\r\n                    <button id='1' onClick={onClickTrain} className='backward'>&lt; Train1</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Train;","import React from 'react';\r\nimport './Collapse.scss';\r\n\r\nvar x = {\"station\":[{\"dest\":0,\"status\":\"red\",\"train\":0},{\"dest\":1,\"status\":\"red\",\"train\":1}],\"train\":[{\"dest\":1,\"status\":\"going\"},{\"dest\":0,\"status\":\"going\"}]};\r\nx = JSON.stringify(x);\r\n\r\nconst Collapse = () => {\r\n    return(\r\n        <div className='Collapse'>\r\n            <input id=\"toggle\" type=\"checkbox\"/>\r\n                <label for=\"toggle\">\r\n                    <span>Status</span>\r\n                    <div className=\"expand\">\r\n                        <span id='status'>{x}</span>\r\n                    </div>\r\n                </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Collapse;","import React,{useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport Collapse from './Collapse/Collapse';\r\nimport './Station.scss';\r\n\r\nvar ENDPOINT = 'https://train-station.herokuapp.com';\r\n\r\nconst Station = (props) => {\r\n    var data = props.data;\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(data).length > 0){\r\n            changeColor();\r\n        }\r\n    });\r\n\r\n    const changeColor = () => {\r\n        let station = data.station;\r\n        for(let i = 0 ; i < 2; i++){\r\n            let divStation = document.getElementById(`st${i}`);\r\n            console.log(divStation);\r\n            let btn = divStation.child;\r\n            let status = station[i].status; \r\n            divStation.classList.remove(`green`);\r\n            divStation.classList.remove(`yellow`);\r\n            divStation.classList.remove(`red`);\r\n            divStation.classList.add(`${status}`);\r\n        }\r\n    }\r\n\r\n    const updateText = () => {\r\n        let station = data.station;\r\n    }\r\n\r\n    const onClickStation = async (e) => {\r\n        e.preventDefault();\r\n        let station = e.target.name;\r\n        await axios.get(ENDPOINT+'/station/release/'+station)\r\n        .catch(err => console.log(err)); \r\n    }\r\n\r\n    return(\r\n        <div className='Station'>\r\n            <div className='eachStation zero' id='st0'>\r\n                <button name='0' onClick={onClickStation}>\r\n                    <span>Station 0</span>\r\n                </button>\r\n                <p>Status: Waiting</p>\r\n                <p>Train: Train0</p>\r\n            </div>\r\n            <div className='eachStation one red' id = 'st1'>\r\n                <button name='1' onClick={onClickStation}>\r\n                    <span>Station 1</span>\r\n                </button>\r\n                <p>Status: Waiting</p>\r\n                <p>Train: Train0</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Station;","import React,{useEffect,useState} from 'react';\r\nimport axios from 'axios';\r\nimport Train from './Train/Train';\r\nimport Station from './Station/Station';\r\nimport './TrainStation.scss';\r\n\r\nvar ENDPOINT = 'https://train-station.herokuapp.com';\r\n\r\nconst TrainStation = () => {\r\n    const [sendData,setSendData] = useState({});\r\n    const [getData,setGetData] = useState('');\r\n\r\n    async function fetchData(){\r\n        await axios.get(ENDPOINT+'/station').then((response) => {\r\n            let data = JSON.stringify(response.data);\r\n            setGetData(data);\r\n            setSendData(response.data);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        return setInterval(() => {\r\n            fetchData();\r\n            console.log('get Data');\r\n        },3000);     \r\n    },[]);\r\n\r\n    const onClickReset = () => {\r\n        axios.get(ENDPOINT+'/station/reset').then((response) => {\r\n            let divGet = document.getElementById('getData');\r\n            divGet.innerHTML = JSON.stringify(response.data);\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div className='TrainStation'>\r\n            <div id='getData'>{getData}</div>\r\n            <Train data={sendData}/>\r\n            <Station data={sendData}/>\r\n            <button onClick={onClickReset}>RESET DATA</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TrainStation ;","import React from 'react';\n\nimport TrainStation from './component/TrainStation';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TrainStation />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}