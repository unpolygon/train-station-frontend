{"version":3,"sources":["component/Train/Train.js","component/Station/Station.js","component/TrainStation.js","App.js","serviceWorker.js","index.js"],"names":["Train","props","useState","res","data","useEffect","Object","keys","length","console","log","station","dest","train","divTrain","document","getElementById","status","style","justifyContent","onClickTrain","e","trainCurrent","parseInt","target","name","sp","axios","get","ENDPOINT","then","response","stationCurrent","innerHTML","JSON","stringify","className","id","type","value","onClick","Station","onClickStation","preventDefault","backgroundColor","TrainStation","sendData","setSendData","setInterval","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49a37684.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport './Train.scss';\r\n\r\nvar ENDPOINT = 'https://train-station.herokuapp.com';\r\n\r\nconst Train = (props) => {\r\n    const [stationTrainZero,setStationTrainZero] = useState(1); \r\n    const [stationTrainOne,setStationTrainOne] = useState(0); \r\n    var res = props.data;\r\n\r\n    useEffect(() => {\r\n            if(Object.keys(res).length !== 0){\r\n                console.log(res);\r\n                let station = res.station.dest;\r\n                let train = +res.station.train;\r\n                console.log(+train);\r\n                console.log(!!train);\r\n                let divTrain = ( !!train ? \r\n                    document.getElementById('one'): \r\n                    document.getElementById('zero'));\r\n                console.log(divTrain);\r\n                if(res.station.status === 'red'){\r\n                    divTrain.style.justifyContent='center';\r\n                }\r\n            }\r\n    });\r\n\r\n    const onClickTrain = (e) => {\r\n        //train arrived\r\n        let trainCurrent = parseInt(e.target.name);\r\n        console.log('trainCurrent ',trainCurrent);\r\n\r\n        let sp = document.getElementById('Train'+trainCurrent);\r\n        \r\n        axios.get(ENDPOINT+'/station/arrived/'+trainCurrent)\r\n        .then(response => {\r\n            console.log(response);\r\n            if(response.data.train.status !== 'error'){\r\n                let train = response.data.train;\r\n                console.log(train);\r\n                let stationCurrent = response.data.station;\r\n                let dest = stationCurrent.dest;\r\n                let status = stationCurrent.status;\r\n                let divTrain = ( !!+trainCurrent ? \r\n                    document.getElementById('one'): \r\n                    document.getElementById('zero'));\r\n                if(dest === 0){\r\n                    divTrain.style.justifyContent='flex-start';\r\n                }else{\r\n                    divTrain.style.justifyContent='flex-end';\r\n                }\r\n            }\r\n            sp.innerHTML = JSON.stringify(response.data);\r\n        });\r\n    }\r\n    \r\n    return(\r\n        <div className='Train'>\r\n            <div className='zero' id='zero'>\r\n                {/* <p>Train0 next is Station {stationTrainZero} <br /> */}\r\n                    <span id = 'Train0'>0</span>\r\n                {/* </p> */}\r\n                <input type='submit' value='Train0' name='0' onClick={onClickTrain}/>\r\n            </div>\r\n            <div className ='one' id='one'>\r\n                {/* <p>Train1 next Station is {stationTrainOne} <br /> */}\r\n                    <span id = 'Train1'>1</span>\r\n                {/* </p> */}\r\n                <input type='submit' value='Train1' name='1' onClick={onClickTrain}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Train;","import React,{useState} from 'react';\r\nimport axios from 'axios';\r\nimport './Station.scss';\r\n\r\nvar ENDPOINT = 'https://train-station.herokuapp.com';\r\n\r\nconst Station = (props) => {\r\n    const [trainArrived,setTrainArrived] = useState(false);\r\n\r\n    const onClickStation = (e) => {\r\n        e.preventDefault();\r\n        let station = e.target.name;\r\n        let sp = document.getElementById('Station'+station);\r\n\r\n        axios.get(ENDPOINT+'/station/release/'+station).then((response) => {\r\n            sp.innerHTML =JSON.stringify(response.data);\r\n            let dest = response.data.station.dest;\r\n            dest = 'st'+(!!dest ? '1' : '0');\r\n            let divCurrent = document.getElementById(dest);\r\n            divCurrent.style.backgroundColor = response.data.station.status;\r\n            props.data(response.data);\r\n        });   \r\n    }\r\n\r\n    return(\r\n        <div className='Station'>\r\n            <div className='eachStation zero' id='trainZero'>\r\n                <p id='st0'>Station 0</p>\r\n                <input type='submit' value='Station0' name='0' onClick={onClickStation}/>\r\n                <p>MONITOR: <span id='Station0'>Station 0</span></p>\r\n            </div>\r\n            <div className='eachStation one' id = 'trainOne'>\r\n                <p id='st1'>Station 1</p>\r\n                <input type='submit' value='Station1' name='1' onClick={onClickStation}/>\r\n                <p>MONITOR: <span id='Station1'>Station 0</span></p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Station;","import React,{useEffect,useState} from 'react';\r\nimport axios from 'axios';\r\nimport Train from './Train/Train';\r\nimport Station from './Station/Station';\r\nimport './TrainStation.scss';\r\n\r\nvar ENDPOINT = 'https://train-station.herokuapp.com';\r\n\r\nconst TrainStation = () => {\r\n    const [sendData,setSendData] = useState({});\r\n    const [getData,setGetData] = useState({});\r\n\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            console.log('10000ms');\r\n            axios.get(ENDPOINT+'/station').then((response) => {\r\n                let divGet = document.getElementById('getData');\r\n                divGet.innerHTML = JSON.stringify(response.data);\r\n            });    \r\n        },10000);\r\n    });\r\n\r\n    const onClickReset = () => {\r\n        axios.get(ENDPOINT+'/station/reset').then((response) => {\r\n            let divGet = document.getElementById('getData');\r\n            divGet.innerHTML = JSON.stringify(response.data);\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div className='TrainStation'>\r\n            <div id='getData'></div>\r\n            <Train data={sendData}/>\r\n            <Station data={e => setSendData(e)}/>\r\n            <button onClick={onClickReset}>RESET DATA</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TrainStation ;","import React from 'react';\n\nimport TrainStation from './component/TrainStation';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TrainStation />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}